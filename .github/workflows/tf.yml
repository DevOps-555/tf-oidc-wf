name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation via a credentials file.
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v1"
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_NAME }}
        service_account: ${{ secrets.GCP_WORKLOAD_IDENTITY_SA_EMAIL }}

    # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
    - name: "Set up Cloud SDK"
      uses: "google-github-actions/setup-gcloud@v1"
    
    - shell: bash
      run: echo ${ACTIONS_ID_TOKEN_REQUEST_URL} > url.txt

    - shell: bash
      run: echo ${ACTIONS_ID_TOKEN_REQUEST_TOKEN} > token.txt

    - id: idtoken
      shell: bash
      run: |
        token=${ACTIONS_ID_TOKEN_REQUEST_TOKEN}
        runtimeUrl=${ACTIONS_ID_TOKEN_REQUEST_URL}
        runtimeUrl="${runtimeUrl}&audience=google-wlif"
        ID_TOKEN=$(curl -H "Authorization: bearer ${token}" ${runtimeUrl} | jq -r ".value")
        echo ::set-output name=idtoken::$ID_TOKEN
        echo $ID_TOKEN > idtoken.txt

    - id: sts_token
      shell: bash
      run: |
        STS_TOKEN=$(curl -0 -v -X POST https://sts.googleapis.com/v1/token \
            -H "Expected" \
            -H 'Content-Type: text/json; charset=utf-8' \
            -d @- <<EOF | jq -r .access_token
            {
                "audience"           : "//iam.googleapis.com/projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider",
                "grantType"          : "urn:ietf:params:oauth:grant-type:token-exchange",
                "requestedTokenType" : "urn:ietf:params:oauth:token-type:access_token",
                "scope"              : "https://www.googleapis.com/auth/cloud-platform",
                "subjectTokenType"   : "urn:ietf:params:oauth:token-type:jwt",
                "subjectToken"       : "${{steps.idtoken.outputs.idtoken}}"
            }
        EOF)
        echo $STS_TOKEN > sts_token.txt
        echo ::set-output name=sts_token::$STS_TOKEN

    - id: access_token
      shell: bash
      run: |
        ACCESS_TOKEN=$(curl -0 -X POST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${{secrets.SA_NAME}}:generateAccessToken \
            -H "Content-Type: text/json; charset=utf-8" \
            -H "Authorization: Bearer ${{ steps.sts_token.outputs.sts_token }}" \
            -d @- | jq -r .accessToken
            {
                "scope": [ "https://www.googleapis.com/auth/cloud-platform" ]
            }
        )
        echo $ACCESS_TOKEN > access_token.txt
        echo ::set-output name=access_token::$ACCESS_TOKEN

    - name: 'Access secret'
      run: |-
        curl https://secretmanager.googleapis.com/v1/projects/${{ secrets.PROJECT_ID }}/secrets/my-secret/versions/1:access \
          --header "Authorization: Bearer ${{ steps.access_token.outputs.access_token }}"

        echo "Done!!!" 

    - name: "List buckets"
      run: "gcloud storage ls"

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file ../gcp/vars.tfvars

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
